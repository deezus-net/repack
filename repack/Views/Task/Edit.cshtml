@using Microsoft.AspNetCore.Mvc.Localization
@using repack.Classes
@model repack.ViewModels.TaskViewModel
@inject IViewLocalizer Localizer
<div class="row mt-5">
    <div class="col-6">
        <a href="~/task/@Model.StackId" class="btn btn-secondary">@Localizer["LabelBack"]</a>
    </div>
</div>
<form class="mt-3" action="~/task/edit/@(Model.StackId)/@(Model.Id > 0 ? Model.Id.ToString() : "")" method="post">
    <div class="form-group">
        <label for="name">@Localizer["LabelName"]</label>
        <input type="text" class="form-control@(ViewData.ModelState.ContainsKey("Task.Name") ? " is-invalid" : "")" id="name" placeholder="@Localizer["LabelName"]" asp-for="Task.Name">
        @if (ViewData.ModelState.ContainsKey("Task.Name"))
        {
            <div class="invalid-feedback">
                @Localizer[ViewData.ModelState["Task.Name"].Errors[0].ErrorMessage]
            </div>
        }
    </div>
    <div class="form-group">
        <label for="conditionKey">@Localizer["LabelCondition"]</label>
        <div class="form-row">
            <div class="col">
                <input type="text" asp-for="TaskContent.ConditionKey" id="conditionKey" class="form-control" />
            </div>
            <div class="col">
                <select asp-for="TaskContent.ConditionType" class="form-control">
                    <option value="@Define.TaskConditionType.Equal">@Localizer["ConditionTypeEqual"]</option>
                    <option value="@Define.TaskConditionType.NotEqual">@Localizer["ConditionTypeNotEqual"]</option>
                </select>
            </div>
            <div class="col">
                <input type="text" asp-for="TaskContent.ConditionValue" class="form-control" />
            </div>
        </div>
        
    </div>
    <div class="form-group">
        <label for="url">@Localizer["LabelURL"]</label>
        <input type="text" class="form-control@(ViewData.ModelState.ContainsKey("TaskContent.Url") ? " is-invalid" : "")" id="url" placeholder="@Localizer["LabelURL"]" asp-for="TaskContent.Url">
        @if (ViewData.ModelState.ContainsKey("TaskContent.Url"))
        {
            <div class="invalid-feedback">
                @Localizer[ViewData.ModelState["TaskContent.Url"].Errors[0].ErrorMessage]
            </div>
        }
    </div>
    <div class="form-group">
        <label for="body">@Localizer["LabelRequestBody"]</label>
        <textarea class="form-control@(ViewData.ModelState.ContainsKey("TaskContent.Body") ? " is-invalid" : "")" id="body" placeholder="@Localizer["LabelRequestBody"]" rows="10" asp-for="TaskContent.Body"></textarea>
        @if (ViewData.ModelState.ContainsKey("TaskContent.Body"))
        {
            <div class="invalid-feedback">
                @Localizer[ViewData.ModelState["TaskContent.Body"].Errors[0].ErrorMessage]
            </div>
        }
    </div>
    @if (Model.Task.Id > 0)
    {
        <div class="form-check mb-3">
            <input type="checkbox" class="form-check-input" id="enabled" asp-for="Task.Enabled">
            <label class="form-check-label" for="enabled">@Localizer["LabelEnabled"]</label>
        </div>
        <div class="form-check">
            <input type="checkbox" class="form-check-input" id="delete" asp-for="Delete">
            <label class="form-check-label" for="delete">@Localizer["LabelDelete"]</label>
        </div>
    }
    <div class="mt-3">
        <button type="submit" class="btn btn-primary">@Localizer["LabelSubmit"]</button>
    </div>
</form>